// <auto-generated />
using System;
using DemoBTL.Infastructure.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DemoBTL.Infastructure.Migrations
{
    [DbContext(typeof(ApplicationDBcontext))]
    partial class ApplicationDBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DemoBTL.Domain.Entity.Address.W.D.P.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Huyện 1 của tỉnh 1",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Huyện 2 của tỉnh 1",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Huyện 3 của tỉnh 2",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Huyện 4 của tỉnh 2",
                            ProvinceId = 2
                        });
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Address.W.D.P.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tỉnh 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tỉnh 2"
                        });
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Address.W.D.P.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictId = 1,
                            Name = "Phường 1 của huyện 1"
                        },
                        new
                        {
                            Id = 2,
                            DistrictId = 2,
                            Name = "Phường 2 của huyện 2"
                        },
                        new
                        {
                            Id = 3,
                            DistrictId = 3,
                            Name = "Phường 3 của huyện 3"
                        },
                        new
                        {
                            Id = 4,
                            DistrictId = 4,
                            Name = "Phường 4 của huyện 4"
                        });
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Cerificate.Detail.CerificateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("CerificateTypes");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Cerificate.Detail.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Answers.Question.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Answers.Question.MakeQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfAnswers")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubjectDetailId");

                    b.ToTable("MakeQuestion");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Creatorld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageCouse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfPurchases")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfStudent")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalCourseDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.CourseSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CourseSubjects");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.LearningProgres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("RegisterStudyId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisterStudyId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("LearningProgres");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActivce")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.SubjectDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("Linkvideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectDetail");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.DoHomework.Dohomework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RegisterStudyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisterStudyId");

                    b.ToTable("Dohomeworks");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.DoHomework.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SubjectDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectDetailId");

                    b.ToTable("Practice");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Pay.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.RegisterStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CouserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DoneTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int?>("PercentComplete")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Registertime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("RegisterStudies");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.ConfirmEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConfirmCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expirytime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmEmails");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleCode = "Admin",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleCode = "Teacher",
                            RoleName = "Teacher"
                        },
                        new
                        {
                            Id = 3,
                            RoleCode = "Student",
                            RoleName = "Student"
                        });
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Address.W.D.P.District", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.Address.W.D.P.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Address.W.D.P.Ward", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.Address.W.D.P.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Cerificate.Detail.CerificateType", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.Cerificate.Detail.Certificate", "Certificate")
                        .WithMany("CerificateTypes")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Cerificate.Detail.Certificate", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.User", "User")
                        .WithMany("Cerificates")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Answers.Question.Answers", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Answers.Question.MakeQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoBTL.Domain.Entity.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Answers.Question.MakeQuestion", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.SubjectDetail", null)
                        .WithMany("MakeQuestions")
                        .HasForeignKey("SubjectDetailId");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.CourseSubject", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Course", "Course")
                        .WithMany("CourseSubjects")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Subject", "Subject")
                        .WithMany("CourseSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.LearningProgres", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.RegisterStudy", "RegisterStudy")
                        .WithMany("LearningProgres")
                        .HasForeignKey("RegisterStudyId");

                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Subject", "Subject")
                        .WithMany("LearningProgres")
                        .HasForeignKey("SubjectId");

                    b.HasOne("DemoBTL.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("RegisterStudy");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.SubjectDetail", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Subject", "Subject")
                        .WithMany("SubjectDetails")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.DoHomework.Dohomework", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.RegisterStudy", "RegisterStudy")
                        .WithMany("DoHomeworks")
                        .HasForeignKey("RegisterStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisterStudy");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.DoHomework.Practice", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.SubjectDetail", null)
                        .WithMany("Practices")
                        .HasForeignKey("SubjectDetailId");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Pay.Bill", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Course", null)
                        .WithMany("Bills")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.RegisterStudy", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Subject", "Subject")
                        .WithMany("RegisterStudies")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoBTL.Domain.Entity.User", "User")
                        .WithMany("RegisterStudies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.User", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.Address.W.D.P.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DemoBTL.Domain.Entity.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId");

                    b.HasOne("DemoBTL.Domain.Entity.Address.W.D.P.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DemoBTL.Domain.Entity.Address.W.D.P.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("District");

                    b.Navigation("Notification");

                    b.Navigation("Province");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.ConfirmEmail", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.Permission", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.Users.Function.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoBTL.Domain.Entity.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.RefreshToken", b =>
                {
                    b.HasOne("DemoBTL.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Address.W.D.P.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Cerificate.Detail.Certificate", b =>
                {
                    b.Navigation("CerificateTypes");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Answers.Question.MakeQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Course", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("CourseSubjects");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.Subject", b =>
                {
                    b.Navigation("CourseSubjects");

                    b.Navigation("LearningProgres");

                    b.Navigation("RegisterStudies");

                    b.Navigation("SubjectDetails");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.Course.Detail.SubjectDetail", b =>
                {
                    b.Navigation("MakeQuestions");

                    b.Navigation("Practices");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.StutyStudent.RegisterStudy", b =>
                {
                    b.Navigation("DoHomeworks");

                    b.Navigation("LearningProgres");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Cerificates");

                    b.Navigation("Permissions");

                    b.Navigation("RegisterStudies");
                });

            modelBuilder.Entity("DemoBTL.Domain.Entity.Users.Function.Role", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
